return(
data %>%
dplyr::select_(summary_attr_, group_attr_) %>%
dplyr::group_by_(group_attr_) %>%
dplyr::summarize_(
min = interp(~min(var, na.rm = T), var = summary_attr_),
mean = interp(~mean(var, na.rm = T), var = summary_attr_),
med = interp(~median(var, na.rm = T), var = summary_attr_),
max = interp(~max(var, na.rm = T), var = summary_attr_),
sd = interp(~sd(var, na.rm = T), var = summary_attr_)
)
group_attr_ <- as.name(group_attr)
require(dplyr)
require(lazyeval)
require(magrittr)
# all purpose function to generate summary statistics for a given attribute grouped by a target attribute
attribute_stats <- function(data, group_attr, summary_attr){
group_attr_ <- as.name(group_attr)
summary_attr_ <- as.name(summary_attr)
return(
data %>%
dplyr::select_(summary_attr_, group_attr_) %>%
dplyr::group_by_(group_attr_) %>%
dplyr::summarize_(
min = interp(~min(var, na.rm = T), var = summary_attr_),
mean = interp(~mean(var, na.rm = T), var = summary_attr_),
med = interp(~median(var, na.rm = T), var = summary_attr_),
max = interp(~max(var, na.rm = T), var = summary_attr_),
sd = interp(~sd(var, na.rm = T), var = summary_attr_)
)
}
require(assertthat)
x <- tibble(c(1,2,3))
typeof(x)
is.data.frame(x)
?p25
?percentile
?quantile
# all purpose function to generate summary statistics for a given attribute grouped by a target attribute
attribute_stats <- function(data, summary_attr, group_attr = NULL){
assertthat::assert_that(is.data.frame(data))
assertthat::assert_that(is.string(summary_attr))
summary_attr_ <- as.name(summary_attr)
if(is.null(group_attr)) {
response <- data %>%
dplyr::select_(summary_attr_)
} else {
assertthat::assert_that(is.string(group_attr))
group_attr_ <- as.name(group_attr)
response <- data %>%
dplyr::select_(summary_attr_, group_attr_) %>%
dplyr::group_by_(group_attr_)
}
return(
response %>%
dplyr::summarize_(
min = interp(~min(var, na.rm = T), var = summary_attr_),
p25 = interp(~quantile(var, probs=0.25, na.rm = T), var = summary_attr_),
mean = interp(~mean(var, na.rm = T), var = summary_attr_),
median = interp(~median(var, na.rm = T), var = summary_attr_),
p75 = interp(~quantile(var, probs=0.75, na.rm = T), var = summary_attr_),
max = interp(~max(var, na.rm = T), var = summary_attr_),
var = interp(~var(var, na.rm = T), var = summary_attr_),
sd = interp(~sd(var, na.rm = T), var = summary_attr_)
)
}
iris
iris %>% attribute_stats('Sepal.Length','Species')
# all purpose function to generate summary statistics for a given attribute grouped by a target attribute
attribute_stats <- function(data, summary_attr, group_attr = NULL){
assertthat::assert_that(is.data.frame(data))
assertthat::assert_that(is.string(summary_attr))
summary_attr_ <- as.name(summary_attr)
if(is.null(group_attr)) {
response <- data %>%
dplyr::select_(summary_attr_)
} else {
assertthat::assert_that(is.string(group_attr))
group_attr_ <- as.name(group_attr)
response <- data %>%
dplyr::select_(summary_attr_, group_attr_) %>%
dplyr::group_by_(group_attr_)
}
return(
response %>%
dplyr::summarise(
min = interp(~min(var, na.rm = T), var = summary_attr_),
p25 = interp(~quantile(var, probs=0.25, na.rm = T), var = summary_attr_),
mean = interp(~mean(var, na.rm = T), var = summary_attr_),
median = interp(~median(var, na.rm = T), var = summary_attr_),
p75 = interp(~quantile(var, probs=0.75, na.rm = T), var = summary_attr_),
max = interp(~max(var, na.rm = T), var = summary_attr_),
var = interp(~var(var, na.rm = T), var = summary_attr_),
sd = interp(~sd(var, na.rm = T), var = summary_attr_)
)
}
iris %>% attribute_stats('Sepal.Length','Species')
# all purpose function to generate summary statistics for a given attribute grouped by a target attribute
attribute_stats <- function(data, summary_attr, group_attr = NULL){
assertthat::assert_that(is.data.frame(data))
assertthat::assert_that(is.string(summary_attr))
summary_attr_ <- as.name(summary_attr)
if(is.null(group_attr)) {
response <- data %>%
dplyr::select_(summary_attr_)
} else {
assertthat::assert_that(is.string(group_attr))
group_attr_ <- as.name(group_attr)
response <- data %>%
dplyr::select_(summary_attr_, group_attr_) %>%
dplyr::group_by_(group_attr_)
}
return(
response %>%
dplyr::summarise_(
min = interp(~min(var, na.rm = T), var = summary_attr_),
p25 = interp(~quantile(var, probs=0.25, na.rm = T), var = summary_attr_),
mean = interp(~mean(var, na.rm = T), var = summary_attr_),
median = interp(~median(var, na.rm = T), var = summary_attr_),
p75 = interp(~quantile(var, probs=0.75, na.rm = T), var = summary_attr_),
max = interp(~max(var, na.rm = T), var = summary_attr_),
var = interp(~var(var, na.rm = T), var = summary_attr_),
sd = interp(~sd(var, na.rm = T), var = summary_attr_)
)
}
iris %>% attribute_stats('Sepal.Length','Species')
# all purpose function to generate summary statistics for a given attribute grouped by a target attribute
attribute_stats <- function(data, summary_attr, group_attr = NULL){
assertthat::assert_that(is.data.frame(data))
assertthat::assert_that(is.string(summary_attr))
summary_attr_ <- as.name(summary_attr)
if(is.null(group_attr)) {
response <- data %>%
dplyr::select_(summary_attr_)
} else {
assertthat::assert_that(is.string(group_attr))
group_attr_ <- as.name(group_attr)
response <- data %>%
dplyr::select_(summary_attr_, group_attr_) %>%
dplyr::group_by_(group_attr_)
}
return(
response %>%
dplyr::summarise_(
min = interp(~min(var, na.rm = T), var = summary_attr_),
p25 = interp(~quantile(var, probs=0.25, na.rm = T), var = summary_attr_),
mean = interp(~mean(var, na.rm = T), var = summary_attr_),
median = interp(~median(var, na.rm = T), var = summary_attr_),
p75 = interp(~quantile(var, probs=0.75, na.rm = T), var = summary_attr_),
max = interp(~max(var, na.rm = T), var = summary_attr_),
sd = interp(~sd(var, na.rm = T), var = summary_attr_)
)
}
iris %>% attribute_stats('Sepal.Length','Species')
iris %>% attribute_stats('Sepal.Length')
x <- c(1,2,1,1,2)
y <- factor(ifelse(x==1, 'P','N'))
?glm
?stepAIC
?MASS::stepAIC
?car
install.packages(car)
install.packages('car')
?car
library(car)
?car
?cooks.distance.glm
?hatvalues
?dof
??degrees
y.hat <- rnorm(100)
y <- rnorm(100)
confm <- table(y.hat, y)
confm
y <- rbinom(100)
y <- sample(c(1,0), 100, T)
y.hat <- sample(c(1,0), 100, T)
confm <- table(y.hat, y)
confm[1,1]
confm[1,0]
confm[1,1]
confm[0,1]
confm[0]
confm[0][1]
confm[0][2]
confm[1:2]
confm[:2]
confm[2]
confm[3]
confm[4]
?list
install.packages(c("devtools", "roxygen2", "roxygen2md", "testthat", "knitr"))
install.packages("installr")
library(installr)
install.RTools()
installr::install.rtools()
?install.rtools
installr::install.rtools(F)
installr::install.rtools(T)
writeLines(strsplit(Sys.getenv("PATH"), ";")[[1]])
library(devtools)
find_rtools()
?find_rtools
has_rtools
has_rtools()
library(pkgbuild)
has_rtools()
writeLines(strsplit(Sys.getenv("PATH"), ";")[[1]])
library(installr)
install.rtools()
install.Rtools()
